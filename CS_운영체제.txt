CS_운영체제

* 운영체제란?
- 시스템의 자원(CPU, 메모리)과 동작을 관리하는 소프트웨어
- 프로세스(RAM), 저장장치(HDD), 네트워킹, 사용자(OS안에 여러 사용자), 하드웨어를 관리

* 메모리 구조(RAM)
- 메모리 공간 종류 4가지 : Code, Data, Heap, Stack
Code : 실행할 프로그램의 코드 부분
Data : 전역변수, 정적변수 할당되는 부분
Heap : 사용자의 데이터 동적 할당(런 타임에 메모리 크기가 결정됨)
Stack : 함수의 호출정보, 지역변수, 매개변수 저장(컴파일 타임에 메모리 크기가 결정됨)

컴파일 : 프로그램을 배포할 때, 메모리가 얼마나 차지할 지 결정됨
런타임 : 내가 사용하면서 결정됨

* 프로세스, 스레드
1) 프로세스
 - 실행중인 프로그램
 - 프로세스끼리 공유하지 않음
 - CPU와 각각의 독립한 메모리 영역(Code, Data, Heap, Stack)을 할당받음
2) 스레드
 - 프로세스 안에서 실행되는 흐름 단위
 - 하나 이상의 스레드가 존재함
 - 프로세스 내에서 스레드는 각각 Stack만 따로 할당받고 CPU, Code, Data, Heap 영역은 다른 스레드와 공유함

* CPU 스케줄러
- 준비 큐 있는 프로세스에 대해 CPU 할당하는 방법

선점 : 남의 것을 빼앗는다, 다른 프로세스의 실행 시간을 뺏는 방법
비선점 : 다른 프로세스 실행이 끝날 때 까지 기다림

* 스케줄링 알고리즘
1) 비선점 스케줄링 종류
 * FCFS
  - First Come First Served
  - 먼저 CPU를 요청하는 프로세스를 먼저 처리하는 방식
 * SJF
  - Shortest Job First
  - 평균 대기 시간을 최소화 하기 위해 사용하는 방식
  - 버스트 시간이 짧은 프로세스부터 CPU를 할당한다.
2) 선점 스케줄링 종류
 * SRT
   - Shortest Remaining Time
  - 최단 잔여시간을 우선으로 하는 스케줄링
   - 진행 중인 프로세스가 있어도, 최단 잔여시간인 프로세스를 위해 sleep 시키고 짧은 프로세스를 먼저 할당한다.
   - 선점형 SJF 스케줄링이라 불린다.
 * RR
   - Round Robin
   - Time Sharing System을 위해 설계된 스케줄링
   - 모든 프로세스가 같은 우선순위를 가지고, time slice(타임 컨텀)를 기반으로 스케줄링 한다.
   - Time Slice Burst가 일어나면 해당 프로세스는 스케줄링 큐의 끝으로 이동한다.
    # Time Slice가 심하게 크다면 FCFS와 다를게 없다.
    # Time Slice가 너무 작다면 불필요한 Context Switch가 많이 일어난다.
      --> 적당하게 설정하기
 * Priority Scheduling(우선 순위 스케줄링)
  - 우선 순위가 높은 프로세스에 CPU를 우선 할당하는 방식의 스케줄링
  - 시간 제한, 메모리 요구량, 프로세스의 중요성, 자원 사용 비용등에 따라 달라질 수 있다.
  - 우선 순위가 같을 경우, FCFS와 다를게 없다.(비선점, 선점 둘 다 사용됨)

* 가상메모리
- 모든 프로세스에게 메모리를 할당하기에는 메모리 크기의 한계가 있음
  --> 사용하는 부분만 메모리에 올리고, 나머지는 디스크에 보관
 - CPU에서 해당 프로그램을 HDD에서 바로 가져와서 실행할 수 없음
  # 메모리에 가지고 와야 CPU로 실행할 수 있음
  # 디스크 효율을 위해 사용하는 부분만 메모리에 올리고 나머지는 디스크에 보관

* 데드락(4가지 모두 만족되어야 한다.)
- 두 개 이상의 작업이 서로 상대방의 작업이 끝나기 만을 기다리고 있기 때문에 결과적으로 아무것도 완료되지 못하는 상태
- 프로세스가 자원을 얻지 못해 다음 작업을 못하는 상태
- 발생조건
 1) 상호 배체(Mutual exclusion)
  - 자원은 한 번에 한 프로세스만이 사용할 수 있어야 함.
 2) 점유 대기(Hold and Wait)
  - 최소한 하나의 자원을 점유하면서 다른 프로세스에 할당되어 사용하고 있는 자원을 추가로 점유하기 위해 대기하는 프로세스가 있어야 함.
 3) 비선점(No preemption)
  - 다른 프로세스에 할당된 자원은 사용이 끝날 때 까지 강제로 빼앗을 수 없어야 한다.
 4) 순환 대기(Circular wait)
  - 프로세스의 집합에서 자원을 점유/대기하는 과정이 순서에 맞게 순환 되어야 한다.